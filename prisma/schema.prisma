generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agents {
  id         Int       @id @default(autoincrement())
  nom        String    @db.VarChar(100)
  fonction   String    @db.VarChar(50)
  entite_id  Int?
  section_id Int?
  entites    entites?  @relation(fields: [entite_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "agents_ibfk_1")
  sections   sections? @relation(fields: [section_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "agents_ibfk_2")
  users      users[]

  @@index([entite_id], map: "entite_id")
  @@index([section_id], map: "section_id")
}

model chargeurs {
  id_chargeur    Int            @id @default(autoincrement())
  model_chargeur String         @db.VarChar(255)
  description    String         @db.VarChar(255)
  qte            Int
  stock          Int
  transactions   transactions[]
}

model demandes {
  id_demande                              Int                     @id @default(autoincrement())
  nom_demandeur                           String?                 @db.VarChar(255)
  date_demande                            DateTime                @db.DateTime(0)
  commentaire                             String?                 @db.VarChar(255)
  signature_demandeur                     String                  @db.VarChar(255)
  qte_total_demande                       Int?
  produit_demande                         String                  @db.LongText
  statut_demande                          demandes_statut_demande
  user_id                                 Int?
  type_demande_id                         Int?
  role_id_recepteur                       Int?
  role_id_demandeur                       Int?
  demande_livree                          Boolean?                @default(false)
  id_demandeur                            Int?
  motif_demande                           String?                 @db.VarChar(255)
  users                                   users?                  @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_2")
  roles_demandes_role_id_recepteurToroles roles?                  @relation("demandes_role_id_recepteurToroles", fields: [role_id_recepteur], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_3")
  roles_demandes_role_id_demandeurToroles roles?                  @relation("demandes_role_id_demandeurToroles", fields: [role_id_demandeur], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_4")
  type_demande                            stock_dt?               @relation(fields: [type_demande_id], references: [id_piece], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_1")
  users_demandes_id_demandeurTousers      users?                  @relation("demandes_id_demandeurTousers", fields: [id_demandeur], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_5")
  validation_demande                      validation_demande[]

  @@index([role_id_demandeur], map: "role_id_demandeur")
  @@index([type_demande_id], map: "type_demande_id")
  @@index([user_id], map: "user_id")
  @@index([role_id_recepteur], map: "role_id_recepteur")
  @@index([id_demandeur], map: "id_demandeur")
}

model entites {
  id       Int        @id @default(autoincrement())
  nom      String     @db.VarChar(100)
  agents   agents[]
  sections sections[]
}

model livraison {
  id_livraison         Int                        @id @default(autoincrement())
  statut_livraison     livraison_statut_livraison @default(en_cours)
  qte_totale_livraison Int
  produitsLivre        String                     @db.LongText
  commentaire          String?                    @db.VarChar(255)
  date_livraison       DateTime                   @db.DateTime(0)
  deleted              Boolean                    @default(false)
  date_deleted         DateTime?                  @db.DateTime(0)
  user_id              Int?
  signature_expediteur String                     @db.VarChar(255)
  nom_livreur          String?                    @db.VarChar(255)
  type_livraison_id    Int?
  users                users?                     @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "livraison_ibfk_1")
  typeLivraison        typeLivraison?             @relation(fields: [type_livraison_id], references: [id_type_livraison], onDelete: Restrict, onUpdate: Restrict, map: "livraison_ibfk_2")
  validations          validations[]

  @@index([type_livraison_id], map: "type_livraison_id")
  @@index([user_id], map: "user_id")
}

model permissions {
  id_permission    Int                @id @default(autoincrement())
  description      String?            @db.VarChar(255)
  role_permissions role_permissions[]
}

model role_permissions {
  id            Int          @id @default(autoincrement())
  role_id       Int?
  permission_id Int?
  roles         roles?       @relation(fields: [role_id], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "role_permissions_ibfk_1")
  permissions   permissions? @relation(fields: [permission_id], references: [id_permission], onDelete: Restrict, onUpdate: Restrict, map: "role_permissions_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
}

model roles {
  id_role                                    Int                @id @default(autoincrement())
  designation_role                           String?            @db.VarChar(255)
  demandes_demandes_role_id_recepteurToroles demandes[]         @relation("demandes_role_id_recepteurToroles")
  demandes_demandes_role_id_demandeurToroles demandes[]         @relation("demandes_role_id_demandeurToroles")
  role_permissions                           role_permissions[]
  user_roles                                 user_roles[]
  users                                      users[]
}

model sections {
  id        Int      @id @default(autoincrement())
  nom       String   @db.VarChar(100)
  entite_id Int?
  agents    agents[]
  entites   entites? @relation(fields: [entite_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sections_ibfk_1")

  @@index([entite_id], map: "entite_id")
}

model transactions {
  id_transaction   Int                           @id @default(autoincrement())
  type_transaction transactions_type_transaction
  quantite         Int
  date_transaction DateTime                      @default(now()) @db.DateTime(0)
  chargeur_id      Int?
  user_id          Int?
  chargeurs        chargeurs?                    @relation(fields: [chargeur_id], references: [id_chargeur], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_1")
  users            users?                        @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_2")

  @@index([chargeur_id], map: "chargeur_id")
  @@index([user_id], map: "user_id")
}

model typeLivraison {
  id_type_livraison  Int         @id @default(autoincrement())
  nom_type_livraison String?     @db.VarChar(255)
  livraison          livraison[]
}

model type_demande {
  id_type_demande  Int    @id @default(autoincrement())
  nom_type_demande String @db.VarChar(255)
}

model user_roles {
  id      Int    @id @default(autoincrement())
  user_id Int?
  role_id Int?
  users   users? @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "user_roles_ibfk_1")
  roles   roles? @relation(fields: [role_id], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "user_roles_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model users {
  id_user                               Int                  @id @default(autoincrement())
  username                              String?              @db.VarChar(255)
  password                              String?              @db.VarChar(255)
  email                                 String?              @db.VarChar(255)
  agent_id                              Int?
  reset_token                           String?              @db.VarChar(255)
  reset_expires                         DateTime?            @db.DateTime(0)
  role_id                               Int?
  demandes                              demandes[]
  demandes_demandes_id_demandeurTousers demandes[]           @relation("demandes_id_demandeurTousers")
  livraison                             livraison[]
  transactions                          transactions[]
  user_roles                            user_roles[]
  roles                                 roles?               @relation(fields: [role_id], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "fk_role_id")
  agents                                agents?              @relation(fields: [agent_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  validation_demande                    validation_demande[]
  validations                           validations[]

  @@index([agent_id], map: "agent_id")
  @@index([role_id], map: "fk_role_id")
}

model validation_demande {
  id_validation_demande     Int                                          @id @default(autoincrement())
  nom_validateur            String?                                      @db.VarChar(255)
  date_validation_demande   DateTime                                     @db.DateTime(0)
  commentaire               String?                                      @db.VarChar(255)
  signature                 String?                                      @db.VarChar(255)
  statut_validation_demande validation_demande_statut_validation_demande
  id_user                   Int?
  id_demande                Int
  demandes                  demandes                                     @relation(fields: [id_demande], references: [id_demande], onUpdate: Restrict, map: "validation_demande_ibfk_1")
  users                     users?                                       @relation(fields: [id_user], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "validation_demande_ibfk_2")

  @@index([id_demande], map: "id_demande")
  @@index([id_user], map: "id_user")
}

model validations {
  id_validation   Int                         @id @default(autoincrement())
  livraison_id    Int
  date_validation DateTime                    @default(now()) @db.DateTime(0)
  etat_validation validations_etat_validation @default(valide)
  commentaire     String?                     @db.VarChar(255)
  user_id         Int?
  nom_recepteur   String?                     @db.VarChar(255)
  signature       String?                     @db.VarChar(255)
  livraison       livraison                   @relation(fields: [livraison_id], references: [id_livraison], onUpdate: Restrict, map: "validations_ibfk_1")
  users           users?                      @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "validations_ibfk_2")

  @@index([livraison_id], map: "livraison_id")
  @@index([user_id], map: "user_id")
}

model model_piece {
  id_model  Int        @id @default(autoincrement())
  nom_model String?    @db.VarChar(255)
  stock_dt  stock_dt[]
}

model stock_dt {
  id_piece    Int         @id @default(autoincrement())
  nom_piece   String      @db.VarChar(255)
  quantite    Int?        @default(0)
  model_id    Int
  code_piece  String?     @db.VarChar(255)
  demandes    demandes[]
  model_piece model_piece @relation(fields: [model_id], references: [id_model], onUpdate: Restrict, map: "stock_dt_ibfk_1")

  @@index([model_id], map: "model_id")
}

enum transactions_type_transaction {
  entree
  sortie
  retour
}

enum livraison_statut_livraison {
  en_cours
  livre
  en_attente
  refuse
}

enum demandes_statut_demande {
  en_cours
  valide
  partiel
  retourne
  refuse
}

enum validations_etat_validation {
  valide
  partiel
  refuse
  retourne
}

enum validation_demande_statut_validation_demande {
  valide
  refuse
  partiel
  retourne
}
