generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Livraisons {
  id                      Int                         @id @default(autoincrement())
  user_id                 Int
  quantite_livraison      Int
  nom_livreur             String?                     @db.VarChar(255)
  commentaire_livraison   String?                     @db.VarChar(255)
  signature_expediteur    String?                     @db.VarChar(255)
  files                   String?                     @db.LongText
  type                    Livraisons_type
  statut_livraison        Livraisons_statut_livraison
  role_id                 Int?
  service_id              Int?
  date_livraison          DateTime                    @default(now()) @db.DateTime(0)
  autres_champs_livraison String?                     @db.LongText
  roles                   roles?                      @relation(fields: [role_id], references: [id_role], map: "Livraisons_ibfk_1")
  services                services?                   @relation(fields: [service_id], references: [id], map: "Livraisons_ibfk_2")
  livraison_piece         livraison_piece?
  reception_livraison     reception_livraison[]

  @@index([role_id], map: "role_id")
  @@index([service_id], map: "service_id")
  @@index([user_id], map: "user_id")
}

model agents {
  id         Int      @id @default(autoincrement())
  nom        String   @db.VarChar(100)
  fonction   String   @db.VarChar(50)
  entite_id  Int?
  section_id Int?
  entites    entites? @relation(fields: [entite_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "agents_ibfk_1")

  @@index([entite_id], map: "entite_id")
  @@index([section_id], map: "section_id")
}

model demandes {
  id_demande                         Int                     @id @default(autoincrement())
  nom_demandeur                      String?                 @db.VarChar(255)
  date_demande                       DateTime                @db.DateTime(0)
  commentaire                        String?                 @db.VarChar(255)
  signature_demandeur                String                  @db.VarChar(255)
  qte_total_demande                  Int?
  stock_carton                       Int?
  nomenclature                       String?                 @db.VarChar(255)
  produit_demande                    String                  @db.LongText
  statut_demande                     demandes_statut_demande
  user_id                            Int?
  type_demande_id                    Int?
  role_id_recepteur                  Int?
  demande_livree                     Boolean?                @default(false)
  id_demandeur                       Int?
  motif_demande                      String?                 @db.VarChar(255)
  service_demandeur                  Int?
  champs_autre                       String?                 @db.LongText
  files                              String?                 @db.LongText
  users_demandes_user_idTousers      users?                  @relation("demandes_user_idTousers", fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_2")
  roles                              roles?                  @relation(fields: [role_id_recepteur], references: [id_role], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_3")
  stock_dt                           stock_dt?               @relation(fields: [type_demande_id], references: [id_piece], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_6")
  users_demandes_id_demandeurTousers users?                  @relation("demandes_id_demandeurTousers", fields: [id_demandeur], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "demandes_ibfk_7")
  services                           services?               @relation(fields: [service_demandeur], references: [id], onDelete: NoAction, map: "demandes_ibfk_8")
  livraison_piece                    livraison_piece?
  validation_demande                 validation_demande[]

  @@index([id_demandeur], map: "id_demandeur")
  @@index([role_id_recepteur], map: "role_id_recepteur")
  @@index([service_demandeur], map: "service_demandeur")
  @@index([type_demande_id], map: "type_demande_id")
  @@index([user_id], map: "user_id")
}

model entites {
  id     Int      @id @default(autoincrement())
  nom    String   @db.VarChar(100)
  agents agents[]
}

model livraison {
  id_livraison               Int                         @id @default(autoincrement())
  statut_livraison           livraison_statut_livraison  @default(en_cours)
  qte_totale_livraison       Int
  produitsLivre              String                      @db.LongText
  commentaire                String?                     @db.VarChar(255)
  date_livraison             DateTime                    @db.DateTime(0)
  deleted                    Boolean                     @default(false)
  date_deleted               DateTime?                   @db.DateTime(0)
  user_id                    Int?
  signature_expediteur       String                      @db.VarChar(255)
  nom_livreur                String?                     @db.VarChar(255)
  type_livraison_id          Int?
  service_id                 Int?
  role_id                    Int?
  model_id                   Int?
  users                      users?                      @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "livraison_ibfk_1")
  type_livraison_commerciale type_livraison_commerciale? @relation(fields: [type_livraison_id], references: [id_type_livraison], onDelete: Restrict, onUpdate: Restrict, map: "livraison_ibfk_2")
  services                   services?                   @relation(fields: [service_id], references: [id], onDelete: NoAction, map: "livraison_ibfk_3")
  roles                      roles?                      @relation(fields: [role_id], references: [id_role], onDelete: NoAction, map: "livraison_ibfk_4")
  model_piece                model_piece?                @relation(fields: [model_id], references: [id_model], onDelete: Restrict, map: "livraison_ibfk_5")
  validations                validations[]

  @@index([model_id], map: "model_id")
  @@index([role_id], map: "role_id")
  @@index([service_id], map: "service_id")
  @@index([type_livraison_id], map: "type_livraison_id")
  @@index([user_id], map: "user_id")
}

model livraison_piece {
  id              Int        @id @default(autoincrement())
  piece_id        Int
  produits_livres String?    @db.LongText
  demande_id      Int?       @unique(map: "demande_id")
  Livraisons      Livraisons @relation(fields: [id], references: [id], onDelete: Cascade, map: "livraison_piece_ibfk_1")
  stock_dt        stock_dt   @relation(fields: [piece_id], references: [id_piece], onDelete: NoAction, map: "livraison_piece_ibfk_2")
  demandes        demandes?  @relation(fields: [demande_id], references: [id_demande], onDelete: Cascade, map: "livraison_piece_ibfk_3")

  @@index([piece_id], map: "piece_id")
}

model model_piece {
  id_model                                              Int             @id @default(autoincrement())
  nom_model                                             String?         @db.VarChar(255)
  livraison                                             livraison[]
  remplacements_remplacements_old_model_idTomodel_piece remplacements[] @relation("remplacements_old_model_idTomodel_piece")
  remplacements_remplacements_new_model_idTomodel_piece remplacements[] @relation("remplacements_new_model_idTomodel_piece")
  stock_dt                                              stock_dt[]
}

model reception_livraison {
  id_reception          Int                                  @id @default(autoincrement())
  livraison_id          Int
  date_reception        DateTime                             @default(now()) @db.DateTime(0)
  user_id               Int
  nom_recepteur         String?                              @db.VarChar(255)
  commentaire_reception String                               @db.VarChar(255)
  signature_recepteur   String?                              @db.VarChar(255)
  statut_reception      reception_livraison_statut_reception
  Livraisons            Livraisons                           @relation(fields: [livraison_id], references: [id], onDelete: Cascade, map: "reception_livraison_ibfk_1")
  users                 users                                @relation(fields: [user_id], references: [id_user], onDelete: NoAction, map: "reception_livraison_ibfk_2")

  @@index([livraison_id], map: "livraison_id")
  @@index([user_id], map: "user_id")
}

model remplacements {
  id                                                  Int                       @id @default(autoincrement())
  quantite                                            Int
  details_remplacement                                String                    @db.LongText
  commentaire                                         String?                   @db.LongText
  date_remplacement                                   DateTime                  @default(now()) @db.DateTime(0)
  user_id                                             Int
  old_model_id                                        Int
  new_model_id                                        Int
  service_id                                          Int
  role_id                                             Int
  deleted                                             Boolean                   @default(false)
  nom_livreur                                         String?                   @db.VarChar(255)
  signature_expediteur                                String?                   @db.VarChar(255)
  details_parametrage                                 String?                   @db.LongText
  statut                                              remplacements_statut
  users                                               users                     @relation(fields: [user_id], references: [id_user], onDelete: NoAction, map: "remplacements_ibfk_1")
  model_piece_remplacements_old_model_idTomodel_piece model_piece               @relation("remplacements_old_model_idTomodel_piece", fields: [old_model_id], references: [id_model], onDelete: NoAction, map: "remplacements_ibfk_2")
  model_piece_remplacements_new_model_idTomodel_piece model_piece               @relation("remplacements_new_model_idTomodel_piece", fields: [new_model_id], references: [id_model], onDelete: NoAction, map: "remplacements_ibfk_3")
  services                                            services                  @relation(fields: [service_id], references: [id], onDelete: NoAction, map: "remplacements_ibfk_4")
  roles                                               roles                     @relation(fields: [role_id], references: [id_role], onDelete: NoAction, map: "remplacements_ibfk_5")
  validation_remplacement                             validation_remplacement[]

  @@index([new_model_id], map: "new_model_id")
  @@index([old_model_id], map: "old_model_id")
  @@index([role_id], map: "role_id")
  @@index([service_id], map: "service_id")
  @@index([user_id], map: "user_id")
}

model roles {
  id_role       Int             @id @default(autoincrement())
  nom_role      String?         @db.VarChar(255)
  Livraisons    Livraisons[]
  demandes      demandes[]
  livraison     livraison[]
  remplacements remplacements[]
  user_roles    user_roles[]
}

model services {
  id            Int             @id @default(autoincrement())
  nom_service   String?         @db.VarChar(255)
  code_service  String?         @db.VarChar(255)
  Livraisons    Livraisons[]
  demandes      demandes[]
  livraison     livraison[]
  remplacements remplacements[]
  stock_dt      stock_dt[]
  user_services user_services[]
}

model stock_dt {
  id_piece        Int               @id @default(autoincrement())
  nom_piece       String            @db.VarChar(255)
  quantite        Int?              @default(0)
  stock_carton    Int?
  model_id        Int
  type            String?           @db.VarChar(255)
  code_piece      String?           @db.VarChar(255)
  service         Int?
  created_by      String?           @db.VarChar(255)
  user_id         Int?
  is_deleted      Boolean           @default(false)
  demandes        demandes[]
  livraison_piece livraison_piece[]
  model_piece     model_piece       @relation(fields: [model_id], references: [id_model], onUpdate: Restrict, map: "stock_dt_ibfk_1")
  services        services?         @relation(fields: [service], references: [id], onDelete: NoAction, map: "stock_dt_ibfk_2")

  @@index([model_id], map: "model_id")
  @@index([service], map: "service")
}

model type_demande {
  id_type_demande  Int    @id @default(autoincrement())
  nom_type_demande String @db.VarChar(255)
}

model type_livraison_commerciale {
  id_type_livraison  Int         @id @default(autoincrement())
  nom_type_livraison String?     @db.VarChar(255)
  created_by         String?     @db.VarChar(255)
  user_id            Int?
  is_deleted         Boolean     @default(false)
  livraison          livraison[]
  users              users?      @relation(fields: [user_id], references: [id_user], onDelete: NoAction, map: "type_livraison_commerciale_ibfk_1")

  @@index([user_id], map: "user_id")
}

model type_parametrage {
  id              Int     @id @default(autoincrement())
  nom_parametrage String? @db.VarChar(255)
}

model user_roles {
  user_id Int
  role_id Int
  users   users @relation(fields: [user_id], references: [id_user], onDelete: Cascade, map: "user_roles_ibfk_3")
  roles   roles @relation(fields: [role_id], references: [id_role], onDelete: Cascade, map: "user_roles_ibfk_4")

  @@id([user_id, role_id])
}

model user_services {
  user_id    Int
  service_id Int
  services   services @relation(fields: [service_id], references: [id], onDelete: Cascade, map: "user_services_ibfk_1")
  users      users    @relation(fields: [user_id], references: [id_user], onDelete: Cascade, map: "user_services_ibfk_2")

  @@id([user_id, service_id])
}

model users {
  id_user                               Int                          @id @default(autoincrement())
  fullname                              String?                      @db.VarChar(255)
  username                              String?                      @db.VarChar(255)
  password                              String?                      @db.VarChar(255)
  email                                 String?                      @db.VarChar(255)
  reset_token                           String?                      @db.VarChar(255)
  reset_expires                         DateTime?                    @db.DateTime(0)
  created_at                            DateTime?                    @default(now()) @db.Date
  demandes_demandes_user_idTousers      demandes[]                   @relation("demandes_user_idTousers")
  demandes_demandes_id_demandeurTousers demandes[]                   @relation("demandes_id_demandeurTousers")
  livraison                             livraison[]
  reception_livraison                   reception_livraison[]
  remplacements                         remplacements[]
  type_livraison_commerciale            type_livraison_commerciale[]
  user_roles                            user_roles[]
  user_services                         user_services[]
  validation_demande                    validation_demande[]
  validation_remplacement               validation_remplacement[]
  validations                           validations[]
}

model validation_demande {
  id_validation_demande     Int                                          @id @default(autoincrement())
  nom_validateur            String?                                      @db.VarChar(255)
  date_validation_demande   DateTime                                     @db.DateTime(0)
  commentaire               String?                                      @db.VarChar(255)
  signature                 String?                                      @db.VarChar(255)
  statut_validation_demande validation_demande_statut_validation_demande
  id_user                   Int?
  id_demande                Int
  demandes                  demandes                                     @relation(fields: [id_demande], references: [id_demande], onUpdate: Restrict, map: "validation_demande_ibfk_1")
  users                     users?                                       @relation(fields: [id_user], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "validation_demande_ibfk_2")

  @@index([id_demande], map: "id_demande")
  @@index([id_user], map: "id_user")
}

model validation_remplacement {
  id              Int           @id @default(autoincrement())
  remplacement_id Int
  date_validation DateTime      @default(now()) @db.DateTime(0)
  user_id         Int
  commentaire     String?       @db.LongText
  nom_recepteur   String?       @db.VarChar(255)
  signature       String?       @db.VarChar(255)
  users           users         @relation(fields: [user_id], references: [id_user], map: "validation_remplacement_ibfk_3")
  remplacements   remplacements @relation(fields: [remplacement_id], references: [id], onDelete: NoAction, map: "validation_remplacement_ibfk_4")

  @@index([remplacement_id], map: "remplacement_id")
  @@index([user_id], map: "user_id")
}

model validations {
  id_validation   Int                         @id @default(autoincrement())
  livraison_id    Int
  date_validation DateTime                    @default(now()) @db.DateTime(0)
  etat_validation validations_etat_validation @default(valide)
  commentaire     String?                     @db.VarChar(255)
  user_id         Int?
  nom_recepteur   String?                     @db.VarChar(255)
  signature       String?                     @db.VarChar(255)
  livraison       livraison                   @relation(fields: [livraison_id], references: [id_livraison], onUpdate: Restrict, map: "validations_ibfk_1")
  users           users?                      @relation(fields: [user_id], references: [id_user], onDelete: Restrict, onUpdate: Restrict, map: "validations_ibfk_2")

  @@index([livraison_id], map: "livraison_id")
  @@index([user_id], map: "user_id")
}

enum livraison_statut_livraison {
  en_cours
  livre
  en_attente
  refuse
}

enum validations_etat_validation {
  valide
  partiel
  refuse
  retourne
}

enum validation_demande_statut_validation_demande {
  valide
  refuse
  partiel
  retourne
}

enum Livraisons_type {
  livraison_piece
  livraison_commerciale
}

enum reception_livraison_statut_reception {
  recu
  retourne
  refuse
}

enum Livraisons_statut_livraison {
  en_cours
  livre
  retourne
  refuse
  annule
}

enum demandes_statut_demande {
  en_cours
  valide
  partiel
  retourne
  refuse
}

enum remplacements_statut {
  en_cours
  livre
  en_attente
  refuse
  annule
}
